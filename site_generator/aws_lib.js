require('dotenv').config()
const AWS = require('aws-sdk')

AWS.config.update({
    accessKeyId: process.env.AWS_ACCESS_KEY,
    secretAccessKey: process.env.AWS_SECRET,
    region: 'us-east-1',
})

const iam = new AWS.IAM();
const ses = new AWS.SES();
const sesv2 = new AWS.SESV2();
const s3 = new AWS.S3();

exports.create_policy = (name, document) => {
    let params = {
        PolicyDocument: document,
        PolicyName: name,
        Description: 'Default policy generated by custom buildtools.',
    };
    return iam.createPolicy(params).promise()
        .then(data => {
            return data
        })
        .catch(err => {
            console.error(err, err.stack)
        })
}

exports.create_user = (name, tag, access_key = true) => {
    let params = {
        UserName: name,
        Tags: [
            {
                Key: tag,
                Value: tag,
            },
        ]
    };
    return iam.createUser(params).promise()
        .then(data => {
            return data
        })
        .then(user => {
            if(access_key) {
                return exports.create_access_key(user.User.UserName).then(key => {
                    user.User.AccessKeyId = key.AccessKey.AccessKeyId
                    user.User.SecretAccessKey = key.AccessKey.SecretAccessKey
                    return user
                })
            }

            return user
        })
        .catch(err => {
            console.error(err, err.stack)
        })
}

exports.attach_policy = (user_name, policy_arn) => {
    let params = {
        PolicyArn: policy_arn,
        UserName: user_name
    };
    return iam.attachUserPolicy(params).promise()
        .then(data => {
            return data
        })
        .catch(err => {
            console.error(err, err.stack)
        })
}

exports.create_access_key = (user_name) => {
    let params = {
        UserName: user_name
    };
    return iam.createAccessKey(params).promise()
        .then(data => {
            return data
        })
        .catch(err => {
            console.error(err, err.stack)
        })
}

exports.create_role = (name, document, tag) => {
    let params = {
        AssumeRolePolicyDocument: document,
        RoleName: name,
        Description: 'Default role generated by custom buildtools.',
        Tags: [
            {
                Key: tag,
                Value: tag
            },
        ]
    };
    return iam.createRole(params).promise()
        .then(data => {
            return data
        })
        .catch(err => {
            console.error(err, err.stack)
        })
}

exports.attach_role_policy = (name, policy_arn) => {
    let params = {
        PolicyArn: policy_arn,
        RoleName: name
    };
    return iam.attachRolePolicy(params).promise()
        .then(data => {
            return data
        })
        .catch(err => {
            console.error(err, err.stack)
        })
}

exports.detach_role_policy = (role_name, policy_arn) => {
    let params = {
        PolicyArn: policy_arn,
        RoleName: role_name
    };
    return iam.detachRolePolicy(params).promise()
        .then(data => {
            return data
        })
        .catch(err => {
            console.error(err, err.stack)
        })
}




exports.delete_policy = (policy_arn) => {
    let params = {
        PolicyArn: policy_arn
    };
    return iam.deletePolicy(params).promise()
        .then(data => {
            return data
        })
        .catch(err => {
            console.error(err, err.stack)
        })
}

exports.delete_user = (user_name) => {
    let params = {
        UserName: user_name
    };
    return iam.deleteUser(params).promise()
        .then(data => {
            return data
        })
        .catch(err => {
            console.error(err, err.stack)
        })
}

exports.detach_policy = (user_name, policy_arn) => {
    let params = {
        PolicyArn: policy_arn,
        UserName: user_name
    };
    return iam.detachUserPolicy(params).promise()
        .then(data => {
            return data
        })
        .catch(err => {
            console.error(err, err.stack)
        })
}

exports.delete_access_key = (user_name, access_key_id) => {
    let params = {
        AccessKeyId: access_key_id,
        UserName: user_name
    };
    return iam.deleteAccessKey(params).promise()
        .then(data => {
            return data
        })
        .catch(err => {
            console.error(err, err.stack)
        })
}

exports.delete_role = (role_name) => {
    let params = {
        RoleName: role_name
    };
    return iam.deleteRole(params).promise()
        .then(data => {
            return data
        })
        .catch(err => {
            console.error(err, err.stack)
        })

}

exports.create_email_identity_v2 = (domain, tag) => {
    let params = {
        EmailIdentity: domain,
        Tags: [
            {
                Key: tag,
                Value: tag
            },
        ]
    };
    return sesv2.createEmailIdentity(params).promise()
        .then(data => {
            return data
        })
        .catch(err => {
            console.error(err, err.stack)
        })
}

exports.get_email_identity_v2 = (domain) => {
    let params = {
        EmailIdentity: domain
    };
    return sesv2.getEmailIdentity(params).promise()
        .then(data => {
            return data
        })
        .catch(err => {
            console.error(err, err.stack)
        })
}

exports.verify_domain_identity = (domain) => {
    let params = {
        Domain: domain
    };
    return ses.verifyDomainIdentity(params).promise()
        .then(data => {
            return data
        })
        .catch(err => {
            console.error(err, err.stack)
        })
}

exports.verify_domain_dkim = (domain) => {
    let params = {
        Domain: domain
    };
    return ses.verifyDomainDkim(params).promise()
        .then(data => {
            return data
        })
        .catch(err => {
            console.error(err, err.stack)
        })
}

exports.set_mail_from_domain = (domain, mail_from) => {
    let params = {
        Identity: domain,
        BehaviorOnMXFailure: 'UseDefaultValue',
        MailFromDomain: mail_from
    };
    return ses.setIdentityMailFromDomain(params).promise()
        .then(data => {
            return data
        })
        .catch(err => {
            console.error(err, err.stack)
        })
}

exports.delete_identity = (domain) => {
    let params = {
        Identity: domain
    };
    return ses.deleteIdentity(params).promise()
        .then(data => {
            return data
        })
        .catch(err => {
            console.error(err, err.stack)
        })
}

exports.create_bucket = (name) => {
    let params = {
        Bucket: name,
        ACL: 'public-read',
    };
    return s3.createBucket(params).promise()
        .then(data => {
            return data
        })
        .catch(err => {
            console.error(err, err.stack)
        })
}

exports.delete_bucket = (bucket) => {
    let params = {
        Bucket: bucket
    };
    return s3.deleteBucket(params).promise()
        .then(data => {
            return data
        })
        .catch(err => {
            console.error(err, err.stack)
        })
}

exports.put_bucket_website = (bucket, index_doc, error_doc) => {
    let params = {
        Bucket: bucket,
        WebsiteConfiguration: {
            ErrorDocument: {
                Key: error_doc
            },
            IndexDocument: {
                Suffix: index_doc
            },
        },
    };
    return s3.putBucketWebsite(params).promise()
        .then(data => {
            return data
        })
        .catch(err => {
            console.error(err, err.stack)
        })
}

exports.put_bucket_policy = (bucket, document) => {
    let params = {
        Bucket: bucket,
        Policy: document
    };
    return s3.putBucketPolicy(params).promise()
        .then(data => {
            return data
        })
        .catch(err => {
            console.error(err, err.stack)
        })
}

exports.put_bucket_tagging = (bucket, tag) => {
    let params = {
        Bucket: bucket,
        Tagging: {
            TagSet: [
                {
                    Key: tag,
                    Value: tag
                },
            ]
        },
    };
    return s3.putBucketTagging(params).promise()
        .then(data => {
            return data
        })
        .catch(err => {
            console.error(err, err.stack)
        })
}

exports.util = {

    get_cname_from_dkim: (token, domain_url) => {
        return {
            name: `${token}._domainkey.${domain_url}`,
            type: `CNAME`,
            value: `${token}.dkim.amazonses.com`
        }
    },

    get_txt_from_verificaton: (token, domain_url) => {
        return {
            name: `_amazonses.${domain_url}`,
            type: 'TXT',
            value: token
        }
    }



}